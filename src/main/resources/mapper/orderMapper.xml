<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mf.mapper.OrderMapper">


<select id="selectCart" >

select 	posting.posting_idx,
		posting.title,
        product.name,
        product_file.file_path,
        person.person_idx,
        cart.cart_idx,
        product.price,
        cart.quantity,
        product_info.product_info_idx,
        users.user_idx
from 	users 
	join person on users.user_idx = person.user_idx
	join cart on person.person_idx = cart.person_idx
	join posting_product on cart.posting_product_idx = posting_product.posting_product_idx
    join posting on posting_product.posting_idx = posting.posting_idx
	join product_info on cart.product_info_idx = product_info.product_info_idx
    join product on product.product_idx = product_info.product_idx
	join product_file on product_info.product_info_idx = product_file.product_info_idx
where	users.user_idx = #{ userIdx }
and		cart.state = '장바구니'


</select>

<select id="selectCart2" >

select 	posting.title,
        product.name,
        product_file.file_path,
        person.person_idx,
        cart.cart_idx,
        product.price,
        cart.quantity,
        product_info.product_info_idx,
        users.user_idx
from 	users 
	join person on users.user_idx = person.user_idx
	join cart on person.person_idx = cart.person_idx
	join posting_product on cart.posting_product_idx = posting_product.posting_product_idx
    join posting on posting_product.posting_idx = posting.posting_idx
	join product_info on cart.product_info_idx = product_info.product_info_idx
    join product on product.product_idx = product_info.product_idx
	join product_file on product_info.product_info_idx = product_file.product_info_idx
where	users.user_idx = #{ userIdx }
and		cart.state = '결제중'


</select>

<select id="selectDelivery">

select	d.delivery_idx,
        d.name,
        d.delivery_name,
        d.email,
        d.phone,
        d.post_code,
        d.address,
        d.detail_address,
        d.person_idx,
        d.content,
        d.is_default
from	delivery d
        join person p on d.person_idx = p.person_idx
        join users u on p.user_idx = u.user_idx
where	u.user_idx = #{ userIdx }
and		(d.is_default = 1
or		d.is_default = 0)
order by d.is_default desc

</select>

<select id="selectDelivery2">

select	d.delivery_idx,
        d.name,
        d.delivery_name,
        d.email,
        d.phone,
        d.post_code,
        d.address,
        d.detail_address,
        d.person_idx,
        d.content
from	delivery d
        join person p on d.person_idx = p.person_idx
        join users u on p.user_idx = u.user_idx
where	u.user_idx = #{ userIdx }
and 	d.is_default = 1

</select>

<select id="selectDelivery3">

select	d.delivery_idx,
        d.name,
        d.delivery_name,
        d.email,
        d.phone,
        d.post_code,
        d.address,
        d.detail_address,
        d.person_idx,
        d.content
from	delivery d
        join person p on d.person_idx = p.person_idx
        join users u on p.user_idx = u.user_idx
where	d.delivery_idx = #{ deliveryIdx }

</select>

<select id="selectOrder"  >


SELECT
    orders.order_idx,
    orders.quantity,
    orders.merchant_uid,
    orders.delivery_price,
    orders.total_price,
    orders.order_date,
    orders.imp_uid,
    orders.person_idx,
    orders.delivery_idx,
    posting.title,
    product.name,
    product_file.file_path,
    delivery.name as dename,
    delivery.email,
    delivery.phone,
    delivery.post_code,
    delivery.address,
    delivery.detail_address
FROM orders
    JOIN person ON orders.person_idx = person.person_idx
    JOIN users ON person.user_idx = users.user_idx
    JOIN order_cart ON order_cart.order_idx = orders.order_idx
    Join delivery on orders.delivery_idx = delivery.delivery_idx
    JOIN cart ON order_cart.cart_idx = cart.cart_idx
    JOIN posting_product ON cart.posting_product_idx = posting_product.posting_product_idx
    JOIN product_info ON cart.product_info_idx = product_info.product_info_idx
    JOIN product_file ON product_info.product_info_idx = product_file.product_info_idx
    JOIN product ON product.product_idx = product_info.product_idx
    JOIN posting ON posting.posting_idx = posting_product.posting_idx
WHERE users.user_idx = #{ userIdx }
AND orders.state = '결제중'

AND orders.order_idx = (
SELECT MAX(orders.order_idx)
    FROM orders
    WHERE state = '결제중')
AND cart.state = '결제중'
AND cart.cart_idx = (
    SELECT MAX(cart.cart_idx)
    FROM cart
    WHERE state = '결제중')
    
</select>

<select id="selectOrder2">

SELECT
    orders.order_idx,
    orders.quantity,
    orders.merchant_uid,
    orders.delivery_price,
    orders.total_price,
    orders.order_date,
    orders.imp_uid,
    orders.person_idx,
    orders.delivery_idx,
    orders.state,
    product.price,
    cart.quantity,
    posting.posting_idx,
    posting.title,
    product.name,
    product_file.file_path
FROM orders
    JOIN person ON orders.person_idx = person.person_idx
    JOIN order_cart ON order_cart.order_idx = orders.order_idx
    Join delivery on orders.delivery_idx = delivery.delivery_idx
    JOIN cart ON order_cart.cart_idx = cart.cart_idx
    JOIN posting_product ON cart.posting_product_idx = posting_product.posting_product_idx
    JOIN product_info ON cart.product_info_idx = product_info.product_info_idx
    JOIN product_file ON product_info.product_info_idx = product_file.product_info_idx
    JOIN product ON product.product_idx = product_info.product_idx
    JOIN posting ON posting.posting_idx = posting_product.posting_idx
WHERE orders.person_idx = #{ personIdx }
and (orders.state = '결제완료'
or orders.state = '배송준비중'
or orders.state = '배송중'
or orders.state = '배송완료')
order by orders.order_date desc

</select>

<select id="selectOrderList">

select o.order_idx,
        o.price,
        o.quantity,
        o.merchant_uid,
        o.delivery_price,
        o.total_price,
        o.order_date,
        o.imp_uid,
        o.delivery_idx,
        o.state,
        p.name,
        p.email
from orders o
join person p on p.person_idx = o.person_idx
join users u on u.user_idx = p.user_idx
where u.user_idx = #{ userIdx }
and o.state = '결제중'

</select>

<select id="selectPersonIdx">

select person_idx
from person
where user_idx = #{ userIdx }

</select>

<select id="selectTotalPrice">

select total_price
    from orders 
     join person on person.person_idx = orders.person_idx
     join users on person.user_idx = users.user_idx
    where orders.state = '결제중'
    and users.user_idx = #{ userIdx }
    and orders.order_idx = (select max(order_idx) from orders join person on person.person_idx = orders.person_idx
     join users on person.user_idx = users.user_idx where users.user_idx = #{ userIdx })

</select>

<select id="selectCartIdxByImpUid"  parameterType="String" resultType="Integer">

select cart.cart_idx
from cart
JOIN order_cart ON cart.cart_idx = order_cart.cart_idx
JOIN orders ON order_cart.order_idx = orders.order_idx
WHERE orders.imp_uid = #{ impUid }

</select>

<select id="selectPosting">

WITH RankedPostings AS (
    SELECT 
        p.posting_idx,
        s.store_name,
        p.title,
        p.store_idx,
        s.address,
        s.detail_address,
        pf.file_path,
        pr.price,
        c.eng_name,
        p.update_date,
        COALESCE(por.rating, 0) AS rating,
        ROW_NUMBER() OVER (PARTITION BY p.posting_idx ORDER BY p.update_date DESC) AS rn,
        COALESCE(COUNT(por.posting_review_idx) OVER (PARTITION BY p.posting_idx), 0) AS reviewCount
    FROM 
        posting p
        JOIN store s ON p.store_idx = s.store_idx
        JOIN posting_product pp ON pp.posting_idx = p.posting_idx
        JOIN product_info pi ON pp.product_info_idx = pi.product_info_idx
        JOIN product pr ON pr.product_idx = pi.product_idx
        JOIN product_file pf ON pf.product_info_idx = pi.product_info_idx
        JOIN sub_category sc ON sc.sub_category_idx = pr.sub_category_idx
        JOIN category c ON c.category_idx = sc.category_idx
        LEFT JOIN posting_review por ON por.posting_idx = p.posting_idx
),
ReviewCounts AS (
    SELECT 
        p.posting_idx,
        COALESCE(COUNT(por.posting_review_idx), 0) AS count1
    FROM 
        posting p
        LEFT JOIN posting_review por ON por.posting_idx = p.posting_idx
    GROUP BY 
        p.posting_idx
)
SELECT 
    rp.posting_idx,
    rp.store_name,
    rp.title,
    rp.store_idx,
    rp.address,
    rp.detail_address,
    rp.file_path,
    rp.price,
    rp.eng_name,
    rp.update_date,
    rp.rating,
    rc.count1 AS reviewCount
FROM 
    RankedPostings rp
JOIN 
    ReviewCounts rc ON rp.posting_idx = rc.posting_idx
WHERE 
    rp.rn = 1


</select>

<select id="selectPosting2">
WITH RankedPostings AS (
    SELECT 
        p.posting_idx,
        s.store_name,
        p.title,
        p.store_idx,
        s.address,
        s.detail_address,
        pf.file_path,
        pr.price,
        c.eng_name,
        p.update_date,
        COALESCE(por.rating, 0) AS rating,
        ROW_NUMBER() OVER (PARTITION BY p.posting_idx ORDER BY p.update_date DESC) AS rn,
        COALESCE(COUNT(por.posting_review_idx) OVER (PARTITION BY p.posting_idx), 0) AS reviewCount
    FROM 
        posting p
        JOIN store s ON p.store_idx = s.store_idx
        JOIN posting_product pp ON pp.posting_idx = p.posting_idx
        JOIN product_info pi ON pp.product_info_idx = pi.product_info_idx
        JOIN product pr ON pr.product_idx = pi.product_idx
        JOIN product_file pf ON pf.product_info_idx = pi.product_info_idx
        JOIN sub_category sc ON sc.sub_category_idx = pr.sub_category_idx
        JOIN category c ON c.category_idx = sc.category_idx
        LEFT JOIN posting_review por ON por.posting_idx = p.posting_idx
),
ReviewCounts AS (
    SELECT 
        p.posting_idx,
        COALESCE(COUNT(por.posting_review_idx), 0) AS count1
    FROM 
        posting p
        LEFT JOIN posting_review por ON por.posting_idx = p.posting_idx
    GROUP BY 
        p.posting_idx
)
SELECT 
    rp.posting_idx,
    rp.store_name,
    rp.title,
    rp.store_idx,
    rp.address,
    rp.detail_address,
    rp.file_path,
    rp.price,
    rp.eng_name,
    rp.update_date,
    rp.rating,
    rc.count1 AS reviewCount
FROM 
    RankedPostings rp
JOIN 
    ReviewCounts rc ON rp.posting_idx = rc.posting_idx
WHERE 
    rp.rn = 1
    AND rp.address LIKE '%' || (
        SELECT 
    REGEXP_SUBSTR(address, '^..', 1, 1) AS first_two_chars
FROM 
    person
WHERE 
    person_idx = #{ personIdx }
    ) || '%'
</select>

<select id="selectPersonLevel" resultType="double">

select pl.benefit
from person p
join person_level pl on p.level_idx = pl.level_idx
where p.person_idx = #{ personIdx }

</select>

<insert id="insertDelivery">

insert into delivery (
						delivery_idx,
						name,
						delivery_name,
						email,
						phone,
						post_code,
						address,
						detail_address,
						person_idx,
						content
						)
				values (
						(select nvl(max(delivery_idx), 0) + 1 from delivery),
						#{ name },
						#{ deliveryName },
						#{ email },
						#{ phone },
						#{ postCode },
						#{ address },
						#{ detailAddress },
						#{ personIdx },
						#{ content }
				)
				
</insert>

<insert id="insertOrder">

insert into orders (
						order_idx,
						price,
						quantity,
						merchant_uid,
						delivery_price,
						total_price,
						order_date,
						person_idx,
						state,
						delivery_idx
						)
				values (
						(select nvl(max(order_idx), 0) + 1 from orders),
						#{ price },
						#{ quantity },
						(SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') || '00' || (select nvl(max(order_idx), 0) + 1 from orders) FROM DUAL),
						#{ deliveryPrice },
						(#{ price } + #{ deliveryPrice }),
						sysdate,
						#{ personIdx },
						'결제중',
						#{ deliveryIdx }
				)
				
</insert>

<update id="updateImpUid">

update orders set imp_uid = #{ impUid }, state = '배송준비중' where state = '결제중' and person_idx = #{ personIdx }
and orders.order_idx = (select max(order_idx) from orders join person on person.person_idx = orders.person_idx
     where person.person_idx = #{ personIdx })

</update>

<update id="updateCartStateToComplete" parameterType="Integer">

update cart set state = '결제완료' where cart_idx = #{ cartIdx }

</update>

<update id="deleteDelivery">

update delivery set is_default = 2 where delivery_idx = #{ deliveryIdx }

</update>

<update id="editDelivery">

update delivery set name = #{ name },
					content = #{content},
					delivery_name = #{ deliveryName },
					email = #{ email },
					phone = #{ phone },
					post_code = #{ postCode },
					address = #{ address },
					detail_address = #{ detailAddress }
				where delivery_idx = #{ deliveryIdx }

</update>

<update id="updateDelivery">

 update delivery set is_default = 0 where person_idx = #{ personIdx } and is_default = 1

</update>

<update id="updateDelivery2">

 update delivery set is_default = 1 where delivery_idx = #{ deliveryIdx }

</update>

<update id="deleteCart2">

 update cart set state = '장바구니' where cart_idx = #{ cartIdx }

</update>

<delete id="deleteCart">

delete from cart where cart_idx = #{ cartIdx }

</delete>

<update id="changePersonLevel">
MERGE INTO person p
USING (
    SELECT o.person_idx,
           (SELECT MAX(pl.level_idx)
            FROM person_level pl
            WHERE o.total_sum BETWEEN pl.purchase AND (
                SELECT MIN(p2.purchase) - 1
                FROM person_level p2
                WHERE p2.purchase > pl.purchase
            )
           ) AS new_level_idx
    FROM (
        SELECT person_idx, SUM(total_price) AS total_sum
        FROM orders
        WHERE person_idx = #{personIdx}
        GROUP BY person_idx
    ) o
) t
ON (p.person_idx = t.person_idx)
WHEN MATCHED THEN
    UPDATE SET p.level_idx = t.new_level_idx
</update>

</mapper>