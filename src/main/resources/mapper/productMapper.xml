<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mf.mapper.ProductMapper">

<!-- 전체 상품 정보 -->
<select id="getAllProductDetails" resultType="java.util.HashMap">
    SELECT 
        p.product_idx AS product_idx,
        p.name AS name,
        p.price AS price,
        p.manufacture_name AS manufacture_name,
        c.kor_name AS category,
        sc.kor_name AS sub_category,
        LISTAGG('[' || pc.color || '] ' || ps.sizes || ', ' || pq.quantity || '개', ' / ') WITHIN GROUP (ORDER BY pc.color) AS inventory,
        TO_CHAR(pi.update_date, 'YYYY.MM.DD') AS update_date,
        LISTAGG(pf.file_path, ', ') WITHIN GROUP (ORDER BY pf.product_file_idx) AS file_paths -- 이미지 파일 결합
    FROM product p
    JOIN product_info pi ON p.product_idx = pi.product_idx
    LEFT JOIN product_file pf ON pi.product_info_idx = pf.product_info_idx -- JOIN 변경
    JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
    JOIN category c ON sc.category_idx = c.category_idx
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    WHERE p.store_idx = #{storeIdx}
    GROUP BY p.product_idx, p.name, p.price, p.manufacture_name, c.kor_name, sc.kor_name, pi.update_date
</select>

<!-- 특정 상품 정보 가져오기 -->
<select id="getProductDetailsByProductIdx" resultType="java.util.HashMap">
    SELECT 
        p.product_idx AS productIdx,
        p.name AS name,
        p.price AS price,
        p.manufacture_name AS manufactureName,
        c.kor_name AS category,
        sc.kor_name AS subCategory,
        LISTAGG(pc.color, ', ') WITHIN GROUP (ORDER BY pc.color) AS colors,
        LISTAGG(ps.sizes, ', ') WITHIN GROUP (ORDER BY ps.sizes) AS sizes,
        LISTAGG(pq.quantity, ', ') WITHIN GROUP (ORDER BY pq.quantity) AS quantities,
        LISTAGG(pf.file_path, ', ') WITHIN GROUP (ORDER BY pf.product_file_idx) AS filePaths
    FROM product p
    JOIN product_info pi ON p.product_idx = pi.product_idx
    LEFT JOIN product_file pf ON pi.product_info_idx = pf.product_info_idx
    JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
    JOIN category c ON sc.category_idx = c.category_idx
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    WHERE p.product_idx = #{productIdx}
    GROUP BY p.product_idx, p.name, p.price, p.manufacture_name, c.kor_name, sc.kor_name
</select>

<!-- 특정 상품의 상세 정보 가져오기 -->
<select id="getProductInfosByProductIdx" resultType="com.mf.dto.ProductInfoDto">
    SELECT 
        pi.product_info_idx AS productInfoIdx,
        pi.product_color_idx AS productColorIdx,
        pi.product_size_idx AS productSizeIdx,
        pi.product_idx AS productIdx,
        pc.color,
        ps.sizes,
        pq.quantity
    FROM product_info pi
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    WHERE pi.product_idx = #{productIdx}
</select>

<!-- 특정 상품의 파일 정보 가져오기 -->
<select id="getProductFilesByProductIdx" resultType="com.mf.dto.ProductFileDto">
    SELECT 
        pf.product_file_idx,
        pf.original_name,
        pf.file_path,
        pf.file_size,
        pf.product_info_idx
    FROM product_file pf
    JOIN product_info pi ON pf.product_info_idx = pi.product_info_idx
    WHERE pi.product_idx = #{productIdx}
</select>

<!-- storeIdx 조회 -->
<select id="getStoreIdxByUserIdx" resultType="long">
    select store_idx
    from store
    where user_idx=#{userIdx}
</select>

<!-- 상품 삽입 -->
<insert id="insertProduct" parameterType="com.mf.dto.ProductDto">
    <selectKey keyProperty="productIdx" resultType="long" order="BEFORE">
        SELECT PRODUCT_SEQ.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product (product_idx, manufacture_name, name, price, sub_category_idx, store_idx, state)
    VALUES (#{productIdx}, #{manufactureName}, #{name}, #{price}, #{subCategoryIdx}, #{storeIdx}, #{state})
</insert>

<!-- 상품 정보 삽입 -->
<insert id="insertProductInfo" parameterType="com.mf.dto.ProductInfoDto">
    <selectKey keyProperty="productInfoIdx" resultType="long" order="BEFORE">
        SELECT PRODUCT_INFO_SEQ.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product_info (product_info_idx, product_color_idx, product_size_idx, product_idx, update_date)
    VALUES (#{productInfoIdx}, #{productColorIdx}, #{productSizeIdx}, #{productIdx}, SYSDATE)
</insert>

<!-- 상품 수량 삽입 -->
<insert id="insertProductQuantity" parameterType="com.mf.dto.ProductQuantityDto">
    <selectKey keyProperty="productQuantityIdx" resultType="long" order="BEFORE">
        SELECT PRODUCT_QUANTITY_SEQ.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product_quantity (product_quantity_idx, quantity, update_date, product_info_idx)
    VALUES (#{productQuantityIdx}, #{quantity}, SYSDATE, #{productInfoIdx})
</insert>

<!-- 상품 사이즈 삽입 -->
<insert id="insertProductSize" parameterType="com.mf.dto.ProductSizeDto">
    <selectKey keyProperty="productSizeIdx" resultType="long" order="BEFORE">
        SELECT PRODUCT_SIZE_SEQ.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product_size (product_size_idx, sizes)
    VALUES (#{productSizeIdx}, #{sizes})
</insert>

<!-- 파일 정보 삽입 -->
<insert id="insertProductFile" parameterType="com.mf.dto.ProductFileDto">
    <selectKey keyProperty="productFileIdx" resultType="long" order="BEFORE">
        SELECT product_file_seq.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product_file (product_file_idx, original_name, file_path, file_size, product_info_idx)
    VALUES (#{productFileIdx}, #{originalName}, #{filePath}, #{fileSize}, #{productInfoIdx})
</insert>

<!-- 새로운 Product ID를 가져옴 -->
<select id="getProductIdx" resultType="long">
    SELECT product_seq.CURRVAL FROM DUAL
</select>

<!-- 카테고리 목록 가져오기 -->
<select id="getCategory" resultType="com.mf.dto.CategoryDto">
    SELECT category_idx AS categoryIdx, kor_name AS korName, eng_name AS engName
    FROM category
</select>

<!-- 카테고리 리스트 가져오기 -->
<select id="getCategoryList" resultType="com.mf.dto.CategoryDto">
    SELECT * FROM category
</select>

<!-- 카테고리 코드로 서브 카테고리 목록 가져오기 -->
<select id="getSubCategoriesByCategoryCode" resultType="com.mf.dto.SubCategoryDto">
    SELECT sc.*
    FROM sub_category sc
    JOIN category c ON sc.category_idx = c.category_idx
    WHERE c.kor_name = #{categoryCode} AND sc.eng_name != 'All'
</select>

<!-- 키워드로 카테고리 목록 가져오기 -->
<select id="getCategoriesByKeyword" resultType="com.mf.dto.CategoryDto">
    SELECT * FROM category
    WHERE kor_name LIKE '%' || #{keyword} || '%'
</select>

<!-- 모든 색상 정보 가져오기 -->
<select id="getAllColors" resultType="com.mf.dto.ProductColorDto">
    SELECT product_color_idx AS productColorIdx, color FROM product_color
</select>

<!-- 모든 사이즈 정보 가져오기 -->
<select id="getAllSizes" resultType="com.mf.dto.ProductSizeDto">
    SELECT product_size_idx AS productSizeIdx, sizes FROM product_size
</select>

<!-- 특정 상품의 상세 정보 가져오기 -->
<select id="getProductDetailsByProductInfoIdx" parameterType="long" resultType="com.mf.dto.ProductDetailsDto">
    SELECT 
        p.name,
        p.price,
        p.manufacture_name AS manufactureName,
        sc.sub_category_idx,
        pc.color,
        ps.sizes AS sizes,
        c.kor_name AS category,
        sc.kor_name AS subCategory,
        pq.quantity,
        TO_CHAR(pi.update_date, 'YYYY.MM.DD') AS updateDate
    FROM product_info pi
    JOIN product p ON pi.product_idx = p.product_idx
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
    JOIN category c ON sc.category_idx = c.category_idx
    WHERE pi.product_info_idx = #{productInfoIdx}
</select>

<!-- 특정 상품의 색상 목록 가져오기 -->
<select id="getProductColors" parameterType="long" resultType="string">
    SELECT color
    FROM product_color
    WHERE product_color_idx IN (
        SELECT product_color_idx
        FROM product_info
        WHERE product_idx = #{productInfoIdx}
    )
</select>

<!-- 특정 상품의 사이즈 목록 가져오기 -->
<select id="getProductSizes" parameterType="long" resultType="string">
    SELECT sizes
    FROM product_size
    WHERE product_size_idx IN (
        SELECT product_size_idx
        FROM product_info
        WHERE product_idx = #{productInfoIdx}
    )
</select>

<!-- 상품 판매글 작성을 위한 전체 상품 정보 로드 쿼리문 -->
<select id="getAllProducts" resultType="com.mf.dto.ProductDto">
    SELECT 
        p.product_idx AS productIdx,
        p.name AS name,
        p.price AS price,
        p.manufacture_name AS manufactureName,
        c.kor_name AS category,
        sc.kor_name AS subCategory,
        LISTAGG('[' || pc.color || '] ' || ps.sizes || ', ' || pq.quantity || '개', ' / ') WITHIN GROUP (ORDER BY pc.color) AS inventory,
        LISTAGG(pf.file_path, ', ') WITHIN GROUP (ORDER BY pf.product_file_idx) AS filePaths
    FROM product p
    JOIN product_info pi ON p.product_idx = pi.product_idx
    LEFT JOIN product_file pf ON pi.product_info_idx = pf.product_info_idx
    JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
    JOIN category c ON sc.category_idx = c.category_idx
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    GROUP BY p.product_idx, p.name, p.price, p.manufacture_name, c.kor_name, sc.kor_name
</select>

<!-- 특정 상품의 세부 정보 가져오기 -->
<select id="getProductDetailsByProductIdxForPosting" resultType="java.util.HashMap">
    SELECT 
        pi.product_info_idx AS productInfoIdx,
        p.product_idx AS productIdx,
        p.name AS name,
        p.price AS price,
        p.manufacture_name AS manufactureName,
        c.kor_name AS category,
        sc.kor_name AS subCategory,
        pc.color AS colors,
        ps.sizes AS sizes,
        pq.quantity AS quantities,
        pf.file_path AS filePaths
    FROM product p
    JOIN product_info pi ON p.product_idx = pi.product_idx
    LEFT JOIN product_file pf ON pi.product_info_idx = pf.product_info_idx
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
    JOIN category c ON sc.category_idx = c.category_idx
    WHERE p.product_idx = #{productIdx}
</select>

<!-- 수정 관련 쿼리문 -->
<select id="selectProductByIdx" parameterType="long" resultType="com.mf.dto.ProductDto">
    SELECT * FROM product WHERE product_idx = #{productIdx}
</select>

<select id="selectProductInfosByProductIdx" parameterType="long" resultType="com.mf.dto.ProductInfoDto">
    SELECT * FROM product_info WHERE product_idx = #{productIdx}
</select>

<select id="selectProductFilesByProductIdx" parameterType="long" resultType="com.mf.dto.ProductFileDto">
    SELECT * FROM product_file WHERE product_info_idx IN (
        SELECT product_info_idx FROM product_info WHERE product_idx = #{productIdx}
    )
</select>

<update id="updateProduct" parameterType="com.mf.dto.ProductDto">
    UPDATE product
    SET name = #{name},
        price = #{price},
        manufacture_name = #{manufactureName},
        sub_category_idx = #{subCategoryIdx}
    WHERE product_idx = #{productIdx}
</update>

<update id="updateProductInfo" parameterType="com.mf.dto.ProductOptionDto">
    UPDATE product_info
    SET product_color_idx = #{colorIdx},
        product_size_idx = #{sizeIdx}
    WHERE product_info_idx = #{productInfoIdx}
</update>

<update id="updateProductQuantity" parameterType="com.mf.dto.ProductOptionDto">
    UPDATE product_quantity
    SET quantity = #{quantity}
    WHERE product_info_idx = #{productInfoIdx}
</update>

<!-- productInfo 삭제 -->
<delete id="deleteProductInfosByProductIdx" parameterType="long">
    DELETE FROM product_info WHERE product_idx = #{productIdx}
</delete>

<!-- productFile 삭제 -->
<delete id="deleteProductFilesByProductIdx" parameterType="long">
    DELETE FROM product_file WHERE product_info_idx IN (SELECT product_info_idx FROM product_info WHERE product_idx = #{productIdx})
</delete>

</mapper>
