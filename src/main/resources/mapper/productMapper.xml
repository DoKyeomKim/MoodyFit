<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mf.mapper.ProductMapper">

<resultMap id="ProductDetailsResultMap" type="com.mf.dto.ProductDetailsDto">
    <id property="productIdx" column="product_idx" />
    <result property="productInfoIdx" column="product_info_idx" />
    <result property="storeIdx" column="store_idx" />
    <result property="name" column="name" />
    <result property="price" column="price" />
    <result property="manufactureName" column="manufacture_name" />
    <result property="color" column="color" />
    <result property="productColorIdx" column="product_color_idx" />
    <result property="sizes" column="sizes" />
    <result property="productSizeIdx" column="product_size_idx" />
    <result property="category" column="category" />
    <result property="subCategory" column="sub_category" />
    <result property="quantity" column="quantity" />
    <result property="updateDate" column="update_date" />
    <collection property="productFiles" ofType="com.mf.dto.ProductFileDto">
        <id property="productFileIdx" column="product_file_idx" />
        <result property="originalName" column="original_name" />
        <result property="filePath" column="file_path" />
        <result property="fileSize" column="file_size" />
    </collection>
</resultMap>


<!-- 전체 상품 정보 -->
<select id="getAllProductDetails" resultMap="ProductDetailsResultMap">
   SELECT 
       pi.product_idx,
       pi.product_info_idx,
       p.store_idx,
       p.name,
       p.price,
       p.manufacture_name,
       pc.color,
       pc.product_color_idx,
       ps.sizes,
       ps.product_size_idx,
       c.kor_name AS category,
       sc.kor_name AS subCategory,
       pq.quantity,
       TO_CHAR(pi.update_date, 'YYYY.MM.DD') AS updateDate,
       pf.product_file_idx,
       pf.original_name,
       pf.file_path,
       pf.file_size
    FROM product_info pi
    JOIN product p ON pi.product_idx = p.product_idx
    JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
    JOIN category c ON sc.category_idx = c.category_idx
    LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
    LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
    LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
    LEFT JOIN product_file pf ON pi.product_info_idx = pf.product_info_idx
    WHERE p.store_idx = #{storeIdx}
</select>


<!-- storeIdx 조회 -->
<select id="getStoreIdxByUserIdx" resultType="long">
select store_idx
from store
where user_idx=#{userIdx}
</select>


<!-- 다중 색상,사이즈,재고 삽입 -->
<insert id="insertProduct" parameterType="com.mf.dto.ProductDto">
    <!-- 시퀀스 값을 미리 가져와서 productIdx에 설정 -->
    <selectKey keyProperty="productIdx" resultType="long" order="BEFORE">
        SELECT product_seq.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product (product_idx, name, price, manufacture_name, sub_category_idx, store_idx)
    VALUES (#{productIdx}, #{name}, #{price}, #{manufactureName}, #{subCategoryIdx}, #{storeIdx})
</insert>

<insert id="insertProductInfo" parameterType="com.mf.dto.ProductInfoDto">
    <selectKey keyProperty="productInfoIdx" resultType="long" order="BEFORE">
        SELECT product_info_seq.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product_info (product_info_idx, product_color_idx, product_size_idx, product_idx)
    VALUES (#{productInfoIdx}, #{productColorIdx}, #{productSizeIdx}, #{productIdx})
</insert>

<insert id="insertProductQuantity" parameterType="com.mf.dto.ProductQuantityDto">
    <selectKey keyProperty="productQuantityIdx" resultType="long" order="BEFORE">
        SELECT product_quantity_seq.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO product_quantity (product_quantity_idx, product_info_idx, quantity, update_date)
    VALUES (#{productQuantityIdx}, #{productInfoIdx}, #{quantity}, SYSDATE)
</insert>

<!-- 파일 정보 삽입 -->
<insert id="insertProductFile" parameterType="com.mf.dto.ProductFileDto">
	<selectKey keyProperty="productFileIdx" resultType="long" order="BEFORE">
		SELECT product_file_seq.NEXTVAL FROM DUAL
	</selectKey>
	INSERT INTO product_file (product_file_idx, original_name, file_path, file_size, product_info_idx)
	VALUES (#{productFileIdx}, #{originalName}, #{filePath}, #{fileSize}, #{productInfoIdx})
</insert>


<!-- 새로운 Product ID를 가져옴 -->
<select id="getProductIdx" resultType="long">
    SELECT product_seq.CURRVAL FROM DUAL
</select>

<!-- 카테고리 목록 가져오기 -->
<select id="getCategory" resultType="com.mf.dto.CategoryDto">
SELECT category_idx AS categoryIdx, kor_name AS korName, eng_name AS engName
        FROM category
</select>


<select id="getCategoryList" resultType="com.mf.dto.CategoryDto">
    SELECT * FROM category
</select>


<select id="getSubCategoriesByCategoryCode" resultType="com.mf.dto.SubCategoryDto">
  select sc.*
  	from sub_category sc
  	join category c on sc.category_idx = c.category_idx
  	where c.kor_name = #{categoryCode}
</select>

<select id="getCategoriesByKeyword" resultType="com.mf.dto.CategoryDto">
  select * from category
 		where kor_name like '%' || #{keyword} || '%'
</select>


<!-- 특정 카테고리의 서브 카테고리 목록 가져오기 
<select id="getSubCategoryList" resultType="com.mf.dto.SubCategoryDto">
    SELECT * FROM sub_category WHERE category_idx = #{categoryIdx}
</select>
-->

<!-- 모든 색상 정보 가져오기 -->
<select id="getAllColors" resultType="com.mf.dto.ProductColorDto">
    SELECT product_color_idx AS productColorIdx, color FROM product_color
</select>

<!-- 모든 사이즈 정보 가져오기 -->
<select id="getAllSizes" resultType="com.mf.dto.ProductSizeDto">
    SELECT product_size_idx AS productSizeIdx, sizes FROM product_size
</select>



<!-- ============ Posting =============== -->
<!-- 판매글 삽입 -->
<insert id="insertPosting" parameterType="com.mf.dto.PostingDto">
	<selectKey keyProperty="postingIdx" resultType="long" order="AFTER">
	    SELECT posting_seq.CURRVAL FROM DUAL
	</selectKey>
	INSERT INTO posting (posting_idx, title, content, update_date, state, store_idx)
	VALUES (posting_seq.NEXTVAL, #{title}, #{content}, SYSDATE, #{state}, #{storeIdx})
</insert>



<!-- 판매글 제품 정보 삽입 -->
<insert id="insertPostingProduct" parameterType="com.mf.dto.PostingProductDto">
   INSERT INTO posting_product (posting_product_idx, posting_idx, product_info_idx)
   VALUES (posting_product_seq.NEXTVAL, #{postingIdx}, #{productInfoIdx})
</insert>



<select id="getProductDetailsByProductInfoIdx" parameterType="long" resultType="com.mf.dto.ProductDetailsDto">
        SELECT 
            p.name,
            p.price,
            p.manufacture_name AS manufactureName,
            sc.sub_category_idx,
            pc.color,
            ps.sizes AS sizes,
            c.kor_name AS category,
            sc.kor_name AS subCategory,
            pq.quantity,
            TO_CHAR(pi.update_date, 'YYYY.MM.DD') AS updateDate
        FROM product_info pi
        JOIN product p ON pi.product_idx = p.product_idx
        LEFT JOIN product_color pc ON pi.product_color_idx = pc.product_color_idx
        LEFT JOIN product_size ps ON pi.product_size_idx = ps.product_size_idx
        LEFT JOIN product_quantity pq ON pi.product_info_idx = pq.product_info_idx
        JOIN sub_category sc ON p.sub_category_idx = sc.sub_category_idx
        JOIN category c ON sc.category_idx = c.category_idx
        WHERE pi.product_info_idx = #{productInfoIdx}
    </select>



<!-- 특정 상품의 색상 목록 가져오기 -->
<select id="getProductColors" parameterType="long" resultType="string">
   SELECT color
   FROM product_color
   WHERE product_color_idx IN (
       SELECT product_color_idx
       FROM product_info
       WHERE product_idx = #{productInfoIdx}
   )
</select>

<!-- 특정 상품의 사이즈 목록 가져오기 -->
<select id="getProductSizes" parameterType="long" resultType="string">
   SELECT sizes
   FROM product_size
   WHERE product_size_idx IN (
       SELECT product_size_idx
       FROM product_info
       WHERE product_idx = #{productInfoIdx}
   )
</select>

<select id="getPostingProduct">
	SELECT posting.title,
				 product.price,
  			 category.eng_name,
  			 sub_category.eng_name,
      	 product_color.color,
    		 product_size.sizes,
      	 product_quantity.quantity,
    	   TO_CHAR(product_info.update_date, 'YYYY.MM.DD') AS updateDate
  FROM users
  			 JOIN store on users.user_idx = store.user_idx
  			 JOIN product on store.store_idx = product.store_idx
  			 JOIN sub_category on sub_category.sub_category_idx = product.sub_category_idx
  			 JOIN category on category.category_idx = sub_category.category_idx
  			 	JOIN product_info on product.product_idx = product_info.product_idx
  			 	JOIN product_quantity on product_info.product_info_idx = product_quantity.product_info_idx
  			 		JOIN product_color on product_info.product_color_idx = product_color.product_color_idx
  			 		JOIN product_size on product_info.product_size_idx = product_size.product_size_idx
  WHERE users.user_idx = #{userIdx} 

</select>



</mapper>